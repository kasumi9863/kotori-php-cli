#!/usr/bin/env php
<?php

# Kotori.php CLI
# This is a Command-Line-Interface scaffold for the PHP framework Kotori.php.
# Know more about the framework: https://github.com/kokororin/Kotori.php

ini_set('date.timezone', 'Asia/Shanghai');
define('DS', DIRECTORY_SEPARATOR);

function disp($text, $color = false, $indentSize = 0, $newline = 1)
{
  $colors = array(
    'black' => 30,
    'red' => 31,
    'green' => 32,
    'yellow' => 33,
    'blue' => 34,
    'magenta' => 35,
    'cyan' => 36,
    'gray' => 37
  );

  if ($indentSize > 0) {
    echo str_repeat(" ", $indentSize);
  }

  if (DS == "\\"
    || $color == false
    || !isset($colors[$color])) {     // Windows
    echo $text;
  } else {    // Linux & macOS
    echo "\033[" . $colors[$color] . "m" . $text . "\033[0m";
  }

  if ($newline > 0) {
    echo str_repeat("\n", $newline);
  }
}

/**
 * @package KotoriCLI
 * @version 0.0.3
 */
class KotoriCLI
{
  const CLI_VERSION = '0.1.0';

  const ENTRY_TEMPLATE = 'PD9waHAKLyoqCiAqIEtvdG9yaS5waHAgZW50cnkgZmlsZSA6IGdlbmVyYXRlZCBieSBLb3RvcmkucGhwIENMSSBhdCB7dGltZXN0YW1wfQogKiBSZXF1aXJlIHRoZSBLb3RvcmkucGhwIHVzaW5nIENvbXBvc2VyJ3MgYXV0b2xvYWRlcgogKgogKiBJZiB5b3UgYXJlIG5vdCB1c2luZyBDb21wb3NlciwgeW91IG5lZWQgdG8gbG9hZCBLb3RvcmkucGhwIHdpdGggeW91ciBvd24KICogUFNSLTQgYXV0b2xvYWRlci4KICovCgpyZXF1aXJlICcuLi92ZW5kb3IvYXV0b2xvYWQucGhwJzsKcmVxdWlyZSAnLi4vY29uZmlnLnBocCc7CgokYXBwID0gbmV3IFxLb3RvcmlcQXBwKCRjb25maWcpOwokYXBwLT5ydW4oKTsK';
  const CONFIG_HEAD = 'PD9waHAKLyoqCiAqIEtvdG9yaS5waHAgLSBBcHAgY29uZmlnIDogZ2VuZXJhdGVkIGJ5IEtvdG9yaS5waHAgQ0xJCiAqLwoKcmVxdWlyZSBkaXJuYW1lKF9fRklMRV9fKSAuICcvYXBwL3JvdXRlcy5waHAnOyAgLy8gaW1wb3J0aW5nIHJvdXRlcwoKJGNvbmZpZyA9IA==';
  const CONFIG_TEMPLATE = 'PD9waHAKLyoqCiAqIEtvdG9yaS5waHAgLSBBcHAgY29uZmlnIDogZ2VuZXJhdGVkIGJ5IEtvdG9yaS5waHAgQ0xJCiAqLwoKcmVxdWlyZSBkaXJuYW1lKF9fRklMRV9fKSAuICcvYXBwL3JvdXRlcy5waHAnOyAgLy8gaW1wb3J0aW5nIHJvdXRlcwoKJGNvbmZpZyA9IGFycmF5KAogICAgJ0FQUF9ERUJVRycgPT4gdHJ1ZSwgICAgICAgLy8gc2V0IHRoaXMgdG8gJ2ZhbHNlJyB3aGVuIGluIHByb2R1Y3Rpb24KICAgICdBUFBfUEFUSCcgID0+ICcuLi9hcHAnLAogICAgJ1VSTF9NT0RFJyAgPT4gJ1BBVEhfSU5GTycsCiAgICAnVVJMX1JPVVRFJyA9PiAkcm91dGVzCik7Cg==';
  const ROUTE_HEAD = 'PD9waHAKLyoqCiAqIEtvdG9yaS5waHAgLSBBcHAgcm91dGVzIDogZ2VuZXJhdGVkIGJ5IEtvdG9yaS5waHAgdG9vbAogKi8KCiRyb3V0ZXMgPSAK';
  const ROUTE_TEMPLATE = 'PD9waHAKLyoqCiAqIEtvdG9yaS5waHAgLSBBcHAgcm91dGVzIDogZ2VuZXJhdGVkIGJ5IEtvdG9yaS5waHAgdG9vbAogKi8KCiRyb3V0ZXMgPSBhcnJheSgKICAgICcvJyA9PiAnSGVsbG8vaW5kZXgnCQkJCS8vIHJlZGlyZWN0IHRvIGBcYXBwXGNvbnRyb2xsZXJzXEhlbGxvXGluZGV4KClgCik7Cg==';

  const CONTROLLER_TEMPLATE = 'PD9waHAKLyoqCiAqIHtDb250cm9sbGVyTmFtZX0gQ29udHJvbGxlcgogKiBHZW5lcmF0ZWQgYnkgS290b3JpLnBocCBDTEkgYXQge3RpbWVzdGFtcH0KICovCm5hbWVzcGFjZSBhcHBcY29udHJvbGxlcnN7bmFtZXNwYWNlfTsKCnVzZSBLb3RvcmlcQ29yZVxDb250cm9sbGVyOwoKY2xhc3Mge0NvbnRyb2xsZXJOYW1lfSBleHRlbmRzIENvbnRyb2xsZXIKewogIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCiAgewogICAgcGFyZW50OjpfX2NvbnN0cnVjdCgpOwogIH0KCiAgLy8gYmVnaW4geW91ciBhd2Vzb21lIGNvZGUhCn0K';
  const MODEL_TEMPLATE = 'PD9waHAKLyoqCiAqIHtNb2RlbE5hbWV9IE1vZGVsCiAqIEdlbmVyYXRlZCBieSBLb3RvcmkucGhwIENMSSBhdCB7dGltZXN0YW1wfQogKi8KbmFtZXNwYWNlIGFwcFxtb2RlbHN7bmFtZXNwYWNlfTsKCnVzZSBLb3RvcmlcQ29yZVxNb2RlbDsKCmNsYXNzIHtNb2RlbE5hbWV9IGV4dGVuZHMgTW9kZWwKewogIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCiAgewogICAgcGFyZW50OjpfX2NvbnN0cnVjdCgpOwogIH0KCiAgLy8gYmVnaW4geW91ciBhd2Vzb21lIGNvZGUhCn0K';
  const VIEW_TEMPLATE = 'PGh0bWw+CiAgPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCIgLz4KICAgIDx0aXRsZT57dGVtcGxhdGVOYW1lfTwvdGl0bGU+CiAgPC9oZWFkPgoKICA8Ym9keT4KICAgIDxoMT5XZWxjb21lIHRvIEtvdG9yaS5waHAhPC9oMT4KICAgIDxwPnt0ZW1wbGF0ZU5hbWV9IC0gQXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgS290b3JpLnBocCBDTEkgYXQge3RpbWVzdGFtcH0uPC9wPgogIDwvYm9keT4KPC9odG1sPg==';

  /**
	 * copy directory directly
	 * @param  string $source
	 * @param  string $dest
	 * @return void
	 */
	private function copydir($source, $dest)
	{
		$dir = opendir($source);
		@mkdir($dest, 0777);

		while (false !== ($file = readdir($dir)))
		{
			if (($file != '.') && ($file != '..')) {
				if (is_dir($source . '/' . $file)) {
					$this->copydir($source . '/' . $file, $dest . '/' . $file);
					continue;
				} else {
					copy($source . '/' . $file, $dest . '/' . $file);
				}
			} // if
		} // while

		closedir($dir);
	}

  /**
   * join path array to a full path
   * @param  Array $pathArray
   * @return string
   */
  private function makePath($pathArray)
  {
    return join(DS, $pathArray);
  }

  /**
   * verify input data
   * @param  string $str
   * @param  string $preg
   * @return boolean
   */
  public function checkAbility($str, $preg)
  {
    preg_match($preg, $str, $res);

    if (empty($res) || strlen($res[0]) != strlen($str)) {
      return false;
    }
    return true;
  }

  public function checkEnv()
  {
    // sapi must be cli
    if (strtolower(php_sapi_name()) != 'cli') {
			echo "[Environment] Kotori.php CLI tool should be operated on PHP CLI mode.\n";
			exit;
		}
    // workspace must be writeable
		if (!is_writable(getcwd())) {
			echo "[Environment] Kotori.php CLI tool needs writing & executing permission.\n";
			exit;
		}

    if (!file_exists(getcwd() . DS . '.kotori')
      && file_exists(getcwd() . DS . 'vendor')) {
      mkdir(getcwd() . DS . '.kotori', 0755);
    }
  }

  public function checkConfigFile()
  {
    $configPath = getcwd() . DS . 'config.php';
    if (!file_exists($configPath)) {
      return false;
    }
    return true;
  }

  /**
   * modify config
   * @return void
   */
  public function config()
  {
    global $argv;
    if (!isset($argv[2]))
      $argv[2] = '';

    $configPath = getcwd() . DS . 'config.php';
    if (!$this->checkConfigFile())
    {
      disp("[Error]", 'red', false, false);
      disp("Can not find Kotori.php config file. You may not in a Kotori.php project directory.");
      exit;
    }

    require $configPath;

    if (!isset($config) && $argv[2] != 'reset') {
      disp("[Error]", 'red', false, false);
      disp("Can not read Kotori.php config file. The config file may be modified by someone.");
      disp("To fix this issue, modify your config variable name to be \$config, or run ", false, false, false);
      disp("$ kotori config reset.", 'gray', false);
      exit;
    }

    switch ($argv[2])
    {
      case 'help':
      default:
        disp("\n  Usage: kotori config <set|remove|list|reset> <key> [value]");
        disp("kotori config set-array <name> [key1=val1] [key2=val2]...", false, 9, 2);
        exit;
        break;

      case 'set-array':
        $config[$argv[3]] = array();
        for ($i = 4; $i < count($argv); $i++)
        {
          $tmp = explode('=', $argv[$i]);
          $config[$argv[3]][$tmp[0]] = $tmp[1];
        }
        break;

      case 'set':
        if (!isset($argv[3]) || !isset($argv[4])) {
          disp("Usage: kotori config set <key> <value>");
          exit;
        }
        $config[$argv[3]] = $argv[4];
        break;

      case 'remove':
        if (!isset($argv[3])) {
          disp("Usage: kotori config remove <key>");
          exit;
        }
        unset($config[$argv[3]]);
        break;

      case 'list':
        print_r($config);
        exit;
        break;

      case 'reset':
        disp("[Warning] ", 'red', false, false);
        disp("This operation will reset your config file! Really? (y/N) ", false, false, false);

        $configFile = fopen($configPath, "w+");
        $confirm = strtolower(trim(fgets(STDIN)));
        if ($confirm == 'y') {
          fwrite($configFile, base64_decode(self::CONFIG_TEMPLATE));
          fclose($configFile);
          exit;
        }
        break;
    }

    $config['URL_ROUTE'] = 'Pending';
    $configFile = fopen($configPath, "w+");
    $content = base64_decode(self::CONFIG_HEAD) . var_export($config, true) . ";\n";
    $content = preg_replace("/(\'URL_ROUTE\' => )(\'Pending\')/", "$1\$routes", $content);

    fwrite($configFile, $content);
    fclose($configFile);

    disp("Config changed.");
  }

  /**
   * generate logic file
   * @return void
   */
  public function generate()
  {
    global $argv;

    if (!isset($argv[2]) || !isset($argv[3])) {
      $argv[2] = '';
    }

    if (!is_dir(getcwd() . DS . 'app')
    ||  !is_dir(getcwd() . DS . 'public')) {
      disp('[Error] ', 'red', false, false);
      disp(
        "Failed to generate anything. You are not in a Kotori.php project directory."
      );
      exit;
    }

    if (isset($argv[3]) && !$this->checkAbility($argv[3], '/^[a-zA-Z][a-zA-Z0-9_\/]*/')) {
      disp("[Error] ", 'red', false, false);
      disp(
        "Name is illegal. Your target name must begin with lower-case letter and not contain special chars excepts underline." .
        "Please try another."
      );
      exit;
    }

    switch ($argv[2])
    {
      case 'controller':
        $filePath = getcwd() . DS . $this->makePath(array('app', 'controllers', $argv[3] . '.php'));
        $controllerName = $argv[3];
        if (strstr($argv[3], '/')) {
          $argv[3] = explode('/', $argv[3]);
          $controllerName = $argv[3][count($argv[3]) - 1];
          unset($argv[3][count($argv[3]) - 1]);

          $path = '';
          foreach ($argv[3] as $val)
          {
            // create namespace directory
            $path .= DS . $val;
            $target = getcwd() . DS . $this->makePath(array('app', 'controllers')) . $path;
            if (!is_dir($target)) {
              mkdir($target, 0755);
            }
          } // foreach
        }

        if (file_exists($filePath)) {
          disp("[Error] ", 'red', false, false);
          disp("Controller \"{$controllerName}\" already exists. Aborting.");
          exit;
        }

        $file = fopen($filePath, 'w+');

        /* do some replacement */
        $content = str_replace('{ControllerName}', $controllerName, base64_decode(self::CONTROLLER_TEMPLATE));    // replace controller name
        if (!is_array($argv[3])) {
          $content = str_replace('{namespace}', '', $content);
        } else {
          $content = str_replace('{namespace}', "\\" . join($argv[3], "\\"), $content);
        }
        $content = str_replace('{timestamp}', date('Y-m-d H:i:s', time()), $content);   // add timestamp
        fwrite($file, $content);
        fclose($file);

        disp("[Success] ", 'green', false, false);
        disp("Controller {$controllerName} created successfully.");
        break;

      case 'model':
        $filePath = getcwd() . DS . $this->makePath(array('app', 'models', $argv[3] . '.php'));
        $modelName = $argv[3];
        if (strstr($argv[3], '/')) {
          $argv[3] = explode('/', $argv[3]);
          $modelName = $argv[3][count($argv[3]) - 1];
          unset($argv[3][count($argv[3]) - 1]);

          $path = '';
          foreach ($argv[3] as $val)
          {
            // create namespace directory
            $path .= DS . $val;
            $target = getcwd() . DS . $this->makePath(array('app', 'models')) . $path;
            if (!is_dir($target)) {
              mkdir($target, 0755);
            }
          } // foreach
        }

        if (file_exists($filePath)) {
          disp("[Error] ", 'red', false, false);
          disp("Model \"{$modelName}\" already exists. Aborting.");
          exit;
        }

        $file = fopen($filePath, 'w+');

        /* do some replacement */
        $content = str_replace('{ModelName}', $modelName, base64_decode(self::MODEL_TEMPLATE));    // replace model name
        if (!is_array($argv[3])) {
          $content = str_replace('{namespace}', '', $content);
        } else {
          $content = str_replace('{namespace}', "\\" . join($argv[3], "\\"), $content);
        }
        $content = str_replace('{timestamp}', date('Y-m-d H:i:s', time()), $content);   // add timestamp
        fwrite($file, $content);
        fclose($file);

        disp("[Success] ", 'green', false, false);
        disp("Model {$modelName} created successfully.");
        break;

      case 'view':
        $argv[3] = explode('/', $argv[3]);
        $viewName = $argv[3][count($argv[3]) - 1];
        unset($argv[3][count($argv[3]) - 1]);

        $path = '';
        foreach ($argv[3] as $val)
        {
          // create namespace directory
          $path .= DS . $val;
          $target = getcwd() . DS . $this->makePath(array('app', 'views')) . $path;
          if (!is_dir($target)) {
            mkdir($target, 0755);
          }
        } // foreach

        $filePath = $this->makePath(array(
          getcwd(), 'app', 'views'
        )) . DS . $this->makePath($argv[3]) .
        DS . $viewName . '.html';

        if (file_exists($filePath)) {
          disp("[Error] ", 'red', false, false);
          disp("View \"{$viewName}\" already exists. Aborting.");
          exit;
        }

        $file = fopen($filePath, 'w+');

        $content = str_replace('{templateName}', $viewName, base64_decode(self::VIEW_TEMPLATE));    // replace model name
        $content = str_replace('{timestamp}', date('Y-m-d H:i:s', time()), $content);   // add timestamp
        fwrite($file, $content);
        fclose($file);

        disp("[Success] ", 'green', false, false);
        disp("View {$viewName} created successfully.");
        break;

      default:
        disp("Usage: kotori generate <controller|model|view> <name>");
        exit;
        break;

    }
  }

  /**
   * initialize an awesome Kotori.php project using CLI
   * @return void
   */
  public function init()
  {
    global $argv;
    $project = array(
      'type' => 'project',
      'license' => 'Apache'
    );

    // Welcome
    disp("Welcome to", false, false, 0);
    disp("Kotori.php CLI", 'gray', 1, 0);
    disp(
      "!\nThis CLI tool will guide you through initializing a pure Kotori.php project.",
      false, false, 2
    );

    // Collecting informations
    $name = '';
    $flag = true;
    while (true) {
      if (isset($argv[2]) && $flag) {
        $project['name'] = $argv[2];
      } else {
        disp("Project name (vendor/project): ", 'cyan', 2, false);
        $project['name'] = strtolower(trim(fgets(STDIN)));
      }

      if (!$this->checkAbility($project['name'], "/^[a-z0-9_\.\-]*\/[a-z0-9_\.\-]*/")) {
        disp("\nIllegal project name: ", 'red', false, false);
        disp(
          "Project name must begin with lower case letters and not contain special signs. " .
          "Please try another. Here is a possible example: kasumi/my-awesome-project.",
          false, false, 2
        );

        $flag = false;
      } else {
        preg_match("/^[a-zA-Z0-9_\.\-]*\/([a-z0-9_\.\-]*)/", $project['name'], $res);

        if (file_exists(getcwd() . DS . '/' . $res[1])) {
          disp("\nIllegal project name: ", 'red', false, false);
          disp(
            "Project " . $res[1] . " already exists. Please try anthoer. ",
            false, false, 2
          );
          $flag = false;
        } else {
          if (isset($argv[2])) {
            disp("Your project name will be: " . $project['name'], 'cyan', 2);
          }
          $name = $res[1];
          break;
        }
      }
    } // Project name

    disp(
      "Project description []: ",
      'cyan', 2, false
    );
    $project['description'] = trim(fgets(STDIN));   // Project description

    while (true) {
      disp("Project author (someone <someone@example.com>): ", 'cyan', 2, false);

      $rawAuthor = trim(fgets(STDIN));
      preg_match("/^([a-zA-Z0-9\-_]*)\s*<([a-zA-Z0-9\._]*\@.*)>/", $rawAuthor, $res);

      // check format
      if (isset($res[1]) && isset($res[2])) {
        $project['author'] = array(array(
          'name' => $res[1],
          'email' => $res[2]
        ));
        break;
      } else {
        disp("\nIllegal project author. ", 'red', false, false);
        disp(
          "Author must be like this: someone <someone@example.com>. Please try again.",
          false, false, 2
        );
      } // else
    } // Project author

    disp("\nInitializing " . $name . "...", 'magenta', false, 2);
    mkdir(getcwd() . DS . $name, 0755);
    chdir(getcwd() . DS . $name);  // change workspace

    /* create composer.json */
    $jsonFile = fopen("composer.json", "w+");
    $op = fwrite($jsonFile, json_encode($project, JSON_PRETTY_PRINT));
    if (!$op) {
      disp("[Error]  ", 'red', false, false);
      disp(
        "Kotori.php CLI can not initialize your project, because Kotori.php CLI can not create composer.json file.\n" .
        "Please check the permission of your working directory, or try again."
      );
    }

    /* install dependencies */
    disp("Resolving dependencies....", 'magenta', false, 2);
    exec('composer require kokororin/kotori-php:dev-master');

    /* build file structure */
    disp("Dependencies installed. Now building framework structure...");
    mkdir(getcwd() . DS . 'app', 0777);
    $this->copydir(getcwd() . DS . $this->makePath(array(
      'vendor', 'kokororin', 'kotori-php', 'example', 'app'
    )), getcwd() . DS . 'app');
    mkdir(getcwd() . DS . 'public', 0777);

    /* create key files */
    // entry file
    $index = fopen(getcwd() . DS . $this->makePath(array('public', 'index.php')), "w+");
    fwrite($index, str_replace('{timestamp}', date('Y-m-d H:i:s'), base64_decode(self::ENTRY_TEMPLATE)));
    fclose($index);

    // config file
    $config = fopen(getcwd() . DS . 'config.php', "w+");
    fwrite($config, base64_decode(self::CONFIG_TEMPLATE));
    fclose($config);

    // routes file
    $routes = fopen(getcwd() . DS . $this->makePath(array('app', 'routes.php')), "w+");
    fwrite($routes, base64_decode(self::ROUTE_TEMPLATE));
    fclose($routes);

    /* success */
    disp("\n[Success] ", 'green', false, false);
    disp(
      "Building for project " . $name . " completed.\n" .
      "To start your development server, run the commands below:",
      false, false, 2
    );
    disp(
      "  $ cd " . $name . " \n" .
      "  $ kotori serve",
      'yellow', false, 2
    );
  }

  /**
   * Start Kotori.php CLI dev server
   * @return void
   */
  public function serve()
  {
    $port = 2333;

    global $argv;

    // custom port
    if ($res = array_search('--port', $argv)) {
      $port = $argv[$res+1];
    }

    if (!is_dir(getcwd() . DS . 'app')
    ||  !is_dir(getcwd() . DS . 'public')) {
      disp('[Error] ', 'red', false, false);
      disp(
        "Failed to start Kotori dev server. You are not in a Kotori.php project directory."
      );
      exit;
    }

    chdir(getcwd() . DS . 'public');

    disp('[Kotori.php CLI] ', 'cyan', 0, false);
    disp('Development server started on http://127.0.0.1:' . $port . ', press Contrl+C to escape.');
    disp('[Kotori.php CLI] ', 'cyan', 0, false);
    disp('Document root is ' . getcwd());
    // start dev server
    exec("php -S 127.0.0.1:" . $port);
  }

  /**
   * database operations
   * @return void
   */
  public function db()
  {
    // read database config
    $state = $this->checkConfigFile();
    if (!$state) {
      disp('[Error] ', 'red', 0, false);
      disp('Can not find Kotori.php config file. Aborting.');
      exit;
    }

    require getcwd() . DS . 'config.php';
    if (!isset($config['DB']) || !is_array($config['DB'])) {
      disp('[Error] ', 'red', 0, false);
      disp('Can not read database config. Aborting.');
      exit;
    }

    $config['APP_PATH'] = getcwd() . DS . 'app';

    require getcwd() . DS . $this->makePath(array('vendor', 'autoload.php'));
    
    global $argv;
    if (!isset($argv[2]) || !isset($argv[3])) {
      disp('This is an experimental feature. Please ensure that you have a valid backup.');
      disp('Usage: kotori db <import|export> <dbname> [path]');
      exit;
    }

    if (!isset($config['DB'][$argv[3]])) {
      disp('[Error] ', 'red', 0, false);
      disp('No database instance named ' . $argv[3] . '.');
      exit;
    }
    $db = $config['DB'][$argv[3]];

    $medoo = new \Medoo\Medoo(array(
      'database_type' => $db['TYPE'],
      'database_name' => $db['NAME'],
      'server' => $db['HOST'],
      'username' => $db['USER'],
      'password' => $db['PWD'],
      'charset' => isset($db['CHARSET']) ? $db['CHARSET'] : 'utf8',
      'port' => isset($db['PORT']) ? $db['PORT'] : 3306,
    ));

    $medoo->query("SET SQL_MODE=''");

    switch ($argv[2])
    {
      case 'export':
        $path = getcwd() . DS . $this->makePath(array(
          '.kotori', $argv[3] . '_dump_' . date('YmdHis') . '.sql'
        ));
        if (isset($argv[4]))
        {
          $path = $argv[4];
        }
        $this->exportDatabase($medoo, $db['NAME'], $path);
        break;

      case 'import':
        $newDbPath = $argv[4];
        if (!file_exists($newDbPath)) {
          disp('[Error] ', 'red', 0, false);
          disp('No sql backup file named ' . $newDbPath);
          exit;
        }

        $path = getcwd() . DS . $this->makePath(array(
          '.kotori', $argv[3] . '_import_backup_' . date('YmdHis') . '.sql'
        ));
        
        disp('[Warning] ', 'yellow', 0, false);
        disp('Before your import operation, Kotori.php CLI will backup your database.');
        $this->exportDatabase($medoo, $db['NAME'], $path);

        sleep(1.5);

        disp("\n[Processing] ", 'cyan', 0, false);
        disp('Importing ' . $argv[4] . '...');
        
        $raw = file_get_contents($newDbPath);
        $raw = preg_replace("/\r\n/", "\n", $raw);
        $queries = explode(";\n", $raw);
        unset($queries[count($queries) - 1]);

        foreach ($queries as $val)
        {
          $val = preg_replace("/,\n/", ", ", $val);
          $sth = $medoo->pdo->prepare($val);
          $medoo->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); 

          try {
            $sth->execute();            
          } catch (PDOException $e) {
            echo "Error: " . $e->getMessage() . "\n";
            echo "While executing query: " . mb_substr($val, 0, 500) . "...\n\n";
          }
        }
        
        disp('[Success] ', 'green', 0, false);
        disp('SQL file has been imported.');
        break;
    }
  }

  /**
   * make an export of database
   * @param  Object $db     
   * @param  String $dbName 
   * @param  String $path   
   * @return void         
   */
  public function exportDatabase($db, $dbName, $path)
  {
    $tables = $db->query('SHOW TABLES')->fetchAll();
    $file = fopen($path, 'w+');
    $content = "";
    $content .= "-- Database " . $dbName . " dumped by Kotori.php CLI at " . date('YmdHis') . "\n\n";
    foreach ($tables as $key => $val)
    {
      disp("[Processing] ", 'cyan', 0, false);
      disp("Dumping $val[0] ...");
      // Create table structure
      $content .= "DROP TABLE IF EXISTS " . $val[0] . ";\n";
      $structure = $db->query('SHOW CREATE TABLE `' . $val[0] . '`')->fetchAll()[0][1];
      $content .= str_replace('"', '`', $structure) . ";\n";

      $data = $db->pdo->query('SELECT * FROM `' . $val[0] . '`')->fetchAll(PDO::FETCH_ASSOC);
      $cols = array();
      if (!isset($data[0]))
      {
        $content .= "\n";
        continue;
      }

      // get cols key;
      foreach ($data[0] as $dkey => $dval)
      {
        array_push($cols, $dkey);
      }

      $insert = "INSERT INTO `" . $val[0] . "` (`" . implode('`, `', $cols) . "`) VALUES ";
      // insert
      for ($i = 0; $i < count($data); $i++)
      {
        foreach ($data[$i] as $colkey => $colvalue)
        {
          $data[$i][$colkey] = '"' . preg_replace('/\r|\r\n|\n/', "\\n", addslashes($colvalue)) . '"';
        }

        $insert .= '(' . implode(', ', $data[$i]);

        if ($i != count($data) - 1)
          $insert .=  "),\n";
        else
          $insert .= ");\n";
      }
      $content .= $insert . "\n";
    }
    fwrite($file, $content);
    disp('[Success] ', 'green', 0, false);
    disp("Dump complete, no error encounted. \nSQL file saved at " . $path);
  }

  /**
   * Show CLI help
   * @return void
   */
  public function showHelp()
  {
    echo "\n";
    disp("Kotori.php CLI: A scaffold CLI tool for the Kotori.php framework", false, 2);
    disp("Usage: kotori command [arg1] [arg2]...", false, 2, 2);

    disp("Avaliable Commands: ", 'green', 2);

    disp("config (conf, c)", 'cyan', 4, false);
    disp("Modify config of a Kotori.php project", false, 13);

    disp("db (d)", 'cyan', 4, false);
    disp("Import or export project database", false, 23);    

    disp("generate (gen, g)", 'cyan', 4, false);
    disp("Generate a pure controller/model/view file.", false, 12);

    disp("init (i) [vendor/name]", 'cyan', 4, false);
    disp("Initialize a pure Kotori.php project.", false, 7);

    disp("serve (s) [--port=]", 'cyan', 4, false);
    disp("Start a development server at localhost.", false, 10);

    disp("version (v, --version)", 'cyan', 4, false);
    disp("Show CLI tool version.", false, 7);

    echo "\n";
  }

  /**
   * Show Kotori.php CLI version: kotori version
   * @return void
   */
  public function showVersion()
  {
    $text = "Kotori.php CLI version " . self::CLI_VERSION;
    disp($text, 'gray');
  }
}

$start = time();
$cli  = new KotoriCLI();

if (!isset($argv[1])) {
  $cli->showHelp();
  exit;
}

$cli->checkEnv();

switch ($argv[1])
{
  case 'v':
  case '-v':
  case 'version':
  case '--version':
    $cli->showVersion();
    break;

  case 'i':
  case 'init':
    $cli->init();
    break;

  case 'c':
  case 'config':
    $cli->config();
    break;

  case 'g':
  case 'gen':
  case 'generate':
    $cli->generate();
    break;

  case 'd':
  case 'db':
    $cli->db();
    break;

  case 's':
  case 'serve':
    $cli->serve();
    break;

  case 'help':
  default:
    $cli->showHelp();
    break;
}

$used = (time() - $start);
disp("Operation finished in " .  $used . 's.');
